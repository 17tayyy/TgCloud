diff --git a/app/TgCloud/client.py b/app/TgCloud/client.py
index 8fb09f0..a04d98c 100644
--- a/app/TgCloud/client.py
+++ b/app/TgCloud/client.py
@@ -113,7 +113,7 @@ async def download_file_from_tgcloud(filename: str, folder: str ="default", db_s
     await telegram_client.download_file(
         message.document,
         file=download_path,
-        part_size_kb=1024
+        part_size_kb=1024*2
     )
 
     if not os.path.exists(download_path):
diff --git a/app/api/endpoints.py b/app/api/endpoints.py
index 6dcd9ed..daa5523 100644
--- a/app/api/endpoints.py
+++ b/app/api/endpoints.py
@@ -1,7 +1,7 @@
 from fastapi import APIRouter, UploadFile, File as FastAPIFile, Form, Depends, BackgroundTasks
 from sqlalchemy.orm import Session
 from fastapi.responses import FileResponse as FastAPIFileResponse
-from app.schemas import FileResponse, FolderCreate, FolderResponse
+from app.schemas import FileResponse, FolderCreate, FolderResponse, FileRename, FolderRename, MoveFile
 from app.TgCloud.client import upload_file_to_tgcloud, download_file_from_tgcloud, delete_file_from_tgcloud, delete_folder_from_tgcloud
 from app.TgCloud.files_db import SessionLocal, File, Folder
 from app.dependencies.db import get_db
@@ -11,25 +11,26 @@ from app.services.file_service import (
     get_files_in_folder,
     get_folder_by_name,
     get_all_folders,
-    get_file_by_id
+    get_file_by_id,
+    rename_folder_of_files,
+    validate_names,
 )
 from app.exceptions import (
     FileNotFoundException,
     FileUploadException,
     FolderAlreadyExistsException,
     BadNameException,
-    FolderNotFound,
-    FolderNotDeleted,
+    FolderNotFoundException,
+    FolderNotDeletedException,
+    FileAlreadyExistsException,
 )
 from typing import List
 import shutil
-import re
 import os
 
 router = APIRouter()
 
 UPLOAD_DIR = "uploaded_files"
-INVALID_CHARS = re.compile(r'[\\/:"*?<>|]')
 os.makedirs(UPLOAD_DIR, exist_ok=True)
 
 def remove_file_from_disk(path: str):
@@ -40,110 +41,232 @@ def remove_file_from_disk(path: str):
 async def list_files(db: Session = Depends(get_db)):
     return get_all_files(db)
 
-@router.get("/folders/{folder}/files/", response_model=List[FileResponse])
-async def list_files_in_folder(folder: str, db: Session = Depends(get_db)):
-    if INVALID_CHARS.search(folder):
-        raise BadNameException(folder)
-    return get_files_in_folder(db, folder)
-
-@router.get("/folders/{folder}/files/{filename}", response_model=FileResponse)
-async def get_file_info(folder: str, filename: str, db: Session = Depends(get_db)):
-    if INVALID_CHARS.search(folder) or INVALID_CHARS.search(filename):
-        raise BadNameException(filename)
-    file = get_file_by_filename(db, filename, folder)
+@router.get("/folders/{foldername}/files/", response_model=List[FileResponse])
+async def list_files_in_folder(foldername: str, db: Session = Depends(get_db)):
+    validate_names(foldername)
+    
+    return get_files_in_folder(db, foldername)
+
+@router.get("/folders/{foldername}/files/{filename}", response_model=FileResponse)
+async def get_file_info(foldername: str, filename: str, db: Session = Depends(get_db)):
+
+    validate_names(foldername, filename)
+
+    file = get_file_by_filename(db, filename, foldername)
+
     if not file:
         raise FileNotFoundException(filename)
+    
     return file
 
-@router.post("/folders/{folder}/files/", response_model=FileResponse)
+@router.post("/folders/{foldername}/files/", response_model=FileResponse)
 async def upload_file(
-    folder: str,
+    foldername: str,
     file: UploadFile = FastAPIFile(...),
     db: Session = Depends(get_db)
 ):
-    if INVALID_CHARS.search(folder):
-        raise BadNameException(folder)
-    folder_exists = get_folder_by_name(db, folder)
+    validate_names(foldername)
+
+    folder_exists = get_folder_by_name(db, foldername)
+
     if not folder_exists:
-        raise FolderNotFound(folder)
+        raise FolderNotFoundException(foldername)
+    
     safe_filename = os.path.basename(file.filename)
     file_location = os.path.join(UPLOAD_DIR, safe_filename)
+
     with open(file_location, "wb") as buffer:
         shutil.copyfileobj(file.file, buffer)
-    db_file = await upload_file_to_tgcloud(file_location, folder=folder, db_session=db)
+
+    db_file = await upload_file_to_tgcloud(file_location, folder=foldername, db_session=db)
+
     if not db_file:
-        raise FileUploadException("Could not save file to the cloud")
+        raise FileUploadException("Could not save file to TgCloud")
     return db_file
 
-@router.get("/folders/{folder}/files/{filename}/download")
+@router.get("/folders/{foldername}/files/{filename}/download")
 async def download_file(
-    folder: str,
+    foldername: str,
     filename: str,
     background_tasks: BackgroundTasks,
     db: Session = Depends(get_db)
 ):
-    if INVALID_CHARS.search(folder) or INVALID_CHARS.search(filename):
-        raise BadNameException(filename)
-    result = await download_file_from_tgcloud(filename, folder, db_session=db)
+    validate_names(foldername, filename)
+    
+    result = await download_file_from_tgcloud(filename, foldername, db)
+
     if not result or not result[0]:
         raise FileNotFoundException(filename)
+    
     download_path, original_name = result
     background_tasks.add_task(remove_file_from_disk, download_path)
+
     return FastAPIFileResponse(
         path=download_path,
         filename=original_name,
         media_type="application/octet-stream"
     )
 
-@router.delete("/folders/{folder}/files/{filename}")
+@router.delete("/folders/{foldername}/files/{filename}")
 async def delete_file(
-    folder: str,
+    foldername: str,
     filename: str,
     db: Session = Depends(get_db)
 ):
-    if INVALID_CHARS.search(folder) or INVALID_CHARS.search(filename):
-        raise BadNameException(filename)
-    deleted = await delete_file_from_tgcloud(filename, folder=folder, db_session=db)
+    validate_names(foldername, filename)
+
+    folder = get_folder_by_name(db, foldername)
+    if not folder:
+        raise FolderNotFoundException(foldername)
+
+    deleted = await delete_file_from_tgcloud(filename, foldername, db)
+
     if not deleted:
         raise FileNotFoundException(filename)
-    return {"message": f"File '{filename}' deleted from folder '{folder}'"}
+    
+    return {"message": f"File '{filename}' deleted from folder '{foldername}'"}
 
 @router.post("/folders/")
 async def create_folder(
     folder_data: FolderCreate,
     db: Session = Depends(get_db)
 ):
-    if INVALID_CHARS.search(folder_data.folder):
-        raise BadNameException(folder_data.folder)
-    exists = get_folder_by_name(db, folder_data.folder)
-    if exists:
+    validate_names(folder_data.folder)
+
+    folder = get_folder_by_name(db, folder_data.folder)
+
+    if folder:
         raise FolderAlreadyExistsException(folder_data.folder)
+    
     new_folder = Folder(name=folder_data.folder)
+
     db.add(new_folder)
     db.commit()
     db.refresh(new_folder)
+
     return {"message": f"Folder '{folder_data.folder}' created"}
 
 @router.get("/folders/", response_model=List[FolderResponse])
-async def list_folder(db: Session = Depends(get_db)):
+async def list_folders(db: Session = Depends(get_db)):
     return get_all_folders(db)
 
-@router.delete("/folders/{folder}/")
-async def delete_folder(folder: str, db: Session = Depends(get_db)):
-    if INVALID_CHARS.search(folder):
-        raise BadNameException(folder)
+@router.delete("/folders/{foldername}/")
+async def delete_folder(foldername: str, db: Session = Depends(get_db)):
+    validate_names(foldername)
     
-    folder = get_folder_by_name(db, folder)
+    folder = get_folder_by_name(db, foldername)
 
     if not folder:
-        raise FolderNotFound(folder)
+        raise FolderNotFoundException(foldername)
     
-    deleted = await delete_folder_from_tgcloud(folder.name, db)
+    if folder.message_ids:
 
-    if not deleted:
-        raise FolderNotDeleted(folder.name)
+        deleted = await delete_folder_from_tgcloud(folder.name, db)
+
+        if not deleted:
+            raise FolderNotDeletedException(foldername)
+        
 
     db.delete(folder)
     db.commit()
 
-    return {"message": f"Folder '{folder.name}' deleted"}
\ No newline at end of file
+    return {"message": f"Folder '{folder.name}' deleted"}
+
+@router.put("/folders/{foldername}/files/{filename}/rename")
+async def rename_file(
+    foldername: str,
+    filename: str,
+    data: FileRename,
+    db: Session = Depends(get_db)
+):
+    validate_names(foldername, filename, data.new_name)
+
+    file = get_file_by_filename(db, filename, foldername)
+    
+    if not file:
+        raise FileNotFoundException(filename)
+
+    existing = get_file_by_filename(db, data.new_name, foldername)
+    if existing:
+        raise FileAlreadyExistsException(filename, foldername)
+
+    file.filename = data.new_name
+
+    db.commit()
+    db.refresh(file)
+
+    return {"message": f"File '{filename}' renamed to '{data.new_name}' in folder '{foldername}'"}
+
+@router.put("/folders/{foldername}/rename")
+async def rename_folder(
+    foldername: str,
+    data: FolderRename,
+    db: Session = Depends(get_db)
+):
+    validate_names(foldername, data.new_name)
+
+    folder = get_folder_by_name(db, foldername)
+
+    if not folder:
+        raise FolderNotFoundException(foldername)
+    
+    existing = get_folder_by_name(db, data.new_name)
+
+    if existing:
+        raise FolderAlreadyExistsException(data.new_name)
+    
+    folder.name = data.new_name
+    
+    rename_folder_of_files(foldername, data.new_name, db)
+
+    db.commit()
+    db.refresh(folder)
+
+    return {"message": f"Folder '{foldername}' renamed to '{data.new_name}'"}
+
+@router.post("/folders/{foldername}/files/{filename}/move")
+async def move_file(
+    foldername: str,
+    filename: str,
+    data: MoveFile,
+    db: Session = Depends(get_db)
+):
+    validate_names(foldername, filename, data.dest_folder)
+    
+    dest_folder = get_folder_by_name(db, data.dest_folder)
+    if not dest_folder:
+        raise FolderNotFoundException(data.dest_folder)
+    
+    folder = get_folder_by_name(db, foldername)
+    if not folder:
+        raise FolderNotFoundException(foldername)
+
+    file = get_file_by_filename(db, filename, foldername)
+    if not file:
+        raise FileNotFoundException(filename)
+
+    file.folder = data.dest_folder
+
+    folder.file_count = (folder.file_count or 1) - 1
+    dest_folder.file_count = (dest_folder.file_count or 0) + 1
+
+    if folder.message_ids:
+        ids = [mid for mid in folder.message_ids.split(",") if mid and mid != str(file.message_id)]
+        folder.message_ids = ",".join(ids)
+
+    if dest_folder.message_ids:
+        ids_dest = [mid for mid in dest_folder.message_ids.split(",") if mid]
+        if str(file.message_id) not in ids_dest:
+            ids_dest.append(str(file.message_id))
+        dest_folder.message_ids = ",".join(ids_dest)
+    else:
+        dest_folder.message_ids = str(file.message_id)
+
+    db.commit()
+    db.refresh(file)
+    db.refresh(folder)
+    db.refresh(dest_folder)
+
+    return {"message": f"File '{filename}' moved from '{foldername}' to '{data.dest_folder}'"}
+
+
diff --git a/app/exceptions/__init__.py b/app/exceptions/__init__.py
index 40caf2d..32ceb96 100644
--- a/app/exceptions/__init__.py
+++ b/app/exceptions/__init__.py
@@ -3,8 +3,9 @@ from .handlers import (
     FileUploadException, file_upload_exception_handler,
     FolderAlreadyExistsException, folder_already_exists_exception_handler,
     BadNameException, bad_name_exception_handler,
-    FolderNotFound, folder_not_found,
-    FolderNotDeleted, folder_not_deteleted
+    FolderNotFoundException, folder_not_found_exception_handler,
+    FolderNotDeletedException, folder_not_deteleted_exception_handler,
+    FileAlreadyExistsException, file_already_exists_exception_handler,
 )
 
 exception_handlers = [
@@ -12,6 +13,7 @@ exception_handlers = [
     (FileUploadException, file_upload_exception_handler),
     (FolderAlreadyExistsException, folder_already_exists_exception_handler),
     (BadNameException, bad_name_exception_handler),
-    (FolderNotFound, folder_not_found),
-    (FolderNotDeleted, folder_not_deteleted)
+    (FolderNotFoundException, folder_not_found_exception_handler),
+    (FolderNotDeletedException, folder_not_deteleted_exception_handler),
+    (FileAlreadyExistsException, file_already_exists_exception_handler),
 ]
\ No newline at end of file
diff --git a/app/exceptions/handlers.py b/app/exceptions/handlers.py
index 5dad6d2..cc58361 100644
--- a/app/exceptions/handlers.py
+++ b/app/exceptions/handlers.py
@@ -38,24 +38,35 @@ class BadNameException(Exception):
 async def bad_name_exception_handler(request: Request, exc: BadNameException):
     return JSONResponse(
         status_code=400,
-        content={"detail": "Bad request (invalid characters)"}
+        content={"detail": f"Invalid name '{exc.name}': contains invalid characters"}
     )
 
-class FolderNotFound(Exception):
+class FolderNotFoundException(Exception):
     def __init__(self, foldername: str):
         self.foldername = foldername
 
-async def folder_not_found(request: Request, exc: FolderNotFound):
+async def folder_not_found_exception_handler(request: Request, exc: FolderNotFoundException):
     return JSONResponse(
         status_code=404,
         content={"detail": f"Folder '{exc.foldername}' not found"}
     )
 
-class FolderNotDeleted(Exception):
+class FileAlreadyExistsException(Exception):
+    def __init__(self, filename: str, foldername: str):
+        self.filename = filename
+        self.foldername = foldername
+
+async def file_already_exists_exception_handler(request: Request, exc: FileAlreadyExistsException):
+    return JSONResponse(
+        status_code=409,
+        content={"detail": f"File '{exc.filename}' already exists in '{exc.foldername}' folder"}
+    )
+
+class FolderNotDeletedException(Exception):
     def __init__(self, foldername: str):
         self.foldername = foldername
 
-async def folder_not_deteleted(request: Request, exc: FolderNotDeleted):
+async def folder_not_deteleted_exception_handler(request: Request, exc: FolderNotDeletedException):
     return JSONResponse(
         status_code = 500,
         content={"detail": f"Error while trying to delete the folder '{exc.foldername}'"}
diff --git a/app/schemas.py b/app/schemas.py
index c88267f..d29ddb7 100644
--- a/app/schemas.py
+++ b/app/schemas.py
@@ -12,6 +12,15 @@ class FileBase(BaseModel):
 class FolderCreate(BaseModel):
     folder: str
 
+class FileRename(BaseModel):
+    new_name: str
+
+class FolderRename(BaseModel):
+    new_name: str
+
+class MoveFile(BaseModel):
+    dest_folder: str
+
 class FileCreate(FileBase):
     pass
 
diff --git a/app/services/file_service.py b/app/services/file_service.py
index ee13147..7e57236 100644
--- a/app/services/file_service.py
+++ b/app/services/file_service.py
@@ -1,5 +1,9 @@
 from sqlalchemy.orm import Session
 from app.TgCloud.files_db import File, Folder
+from app.exceptions import BadNameException
+import re
+
+INVALID_CHARS = re.compile(r'[\\/:"*?<>|]')
 
 def get_file_by_id(db: Session, file_id: int):
     return db.query(File).filter_by(id=file_id).first()
@@ -17,4 +21,12 @@ def get_folder_by_name(db: Session, foldername: str):
     return db.query(Folder).filter_by(name=foldername).first()
 
 def get_all_folders(db: Session):
-    return db.query(Folder).all()
\ No newline at end of file
+    return db.query(Folder).all()
+
+def rename_folder_of_files(foldername: str, new_name: str, db: Session):
+    db.query(File).filter_by(folder=foldername).update({"folder": new_name})
+
+def validate_names(*names):
+    for name in names:
+        if INVALID_CHARS.search(name):
+            raise BadNameException(name)
\ No newline at end of file
diff --git a/tests/tests.sh b/tests/tests.sh
deleted file mode 100644
index 7a5c22f..0000000
--- a/tests/tests.sh
+++ /dev/null
@@ -1,72 +0,0 @@
-#!/bin/bash
-
-API_URL="http://127.0.0.1:8000/api/v1"
-
-GREEN="\e[32m"
-RED="\e[31m"
-BLUE="\e[34m"
-YELLOW="\e[33m"
-RESET="\e[0m"
-CHECK="${GREEN}[✔]${RESET}"
-CROSS="${RED}[✘]${RESET}"
-INFO="${BLUE}[i]${RESET}"
-
-TOTAL_TESTS=0
-PASSED_TESTS=0
-FAILED_TESTS=0
-
-function print_title() {
-    echo -e "\n${YELLOW}== $1 ==${RESET}"
-    ((TOTAL_TESTS++))
-}
-
-function print_result() {
-    if [[ $1 == 0 ]]; then
-        echo -e "${CHECK} $2"
-        ((PASSED_TESTS++))
-    else
-        echo -e "${CROSS} $2"
-        ((FAILED_TESTS++))
-    fi
-}
-
-print_title "📁 Create folder 'testfolder'"
-curl -s -X POST "$API_URL/folders/" \
-    -H "Content-Type: application/json" \
-    -d '{"folder":"testfolder"}' | jq .
-print_result $? "Folder created (or already exists)"
-
-print_title "📄 List all files"
-curl -s "$API_URL/files/" | jq .
-print_result $? "Files listed successfully"
-
-print_title "📤 Upload file 'test.txt' to 'testfolder'"
-curl -s -F "file=@/home/tay/Desktop/Projects/TelegramCloudSystem/TgCloudCLI/downloads/test.txt" "$API_URL/folders/testfolder/files/" | jq .
-print_result $? "File uploaded successfully"
-
-print_title "📂 List files in folder 'testfolder'"
-curl -s "$API_URL/folders/testfolder/files/" | jq .
-print_result $? "Files listed in the folder"
-
-print_title "🔍 Get file info (test.txt in testfolder)"
-curl -s "$API_URL/folders/testfolder/files/test.txt" | jq .
-print_result $? "File info retrieved"
-
-print_title "📥 Download file 'test.txt' from 'testfolder'"
-curl -s -o downloaded_test.txt "$API_URL/folders/testfolder/files/test.txt/download"
-if [ -f downloaded_test.txt ]; then
-    print_result 0 "File downloaded successfully"
-    rm downloaded_test.txt
-else
-    print_result 1 "Error downloading the file"
-fi
-
-print_title "🗑️ Delete file 'test.txt' from 'testfolder'"
-curl -s -X DELETE "$API_URL/folders/testfolder/files/test.txt" | jq .
-print_result $? "File deleted successfully"
-
-echo -e "\n${BLUE}========= SUMMARY =========${RESET}"
-echo -e "Total:   $TOTAL_TESTS"
-echo -e "${GREEN}Passed:  $PASSED_TESTS${RESET}"
-echo -e "${RED}Failed:  $FAILED_TESTS${RESET}"
-echo -e "${BLUE}===========================${RESET}\n"
\ No newline at end of file
